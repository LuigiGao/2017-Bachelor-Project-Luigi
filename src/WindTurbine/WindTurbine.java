package WindTurbine;

import java.util.Random;

/**
 * This class simulate the work of wind turbine, could use to calculate the
 * power of that wind turbine with given weather information
 * 
 * Resource: 
 * http://www.wind-power-program.com/small_turbines.htm
 * http://www.ijsrp.org/research_paper_feb2012/ijsrp-feb-2012-06.pdf
 * https://en.wikipedia.org/wiki/Density_of_air#Composition
 * http://www.floodmap.net/Elevation/ElevationMap/?gi=2755251
 * 
 * @author Luigi
 *
 */

public abstract class WindTurbine {

	/** Blade length(diameter) of the wind turbine (in 1 m) */
	protected double bladeLength;

	/** Area that swept by the blade of the wind turbine (in 1 m^2) */
	protected double bladeSweptArea;

	/** Maximum power of the wind turbine (in 1 kW) */
	protected double maxPowerOutput;

	/** Height of the wind turbine (in 1 m) */
	protected double height;

	/** Minimum wind speed that wind turbine starts work (in 1 m/s) */
	protected double cut_in_speed;

	/**
	 * Maximum wind speed that wind turbine stops work preventing damage (in 1 m/s)
	 */
	protected double cut_out_speed;

	/**
	 * The percentage of actual electric energy get from wind with the energy loss
	 * in transform wind energy to electric energy
	 */
	private double efficiency;

	/** Sea level standard atmospheric pressure, 101.325 kPa */
	private final double atmosphericPressure = 101325;
	
	/** Sea level standard temperature, 288.15 K */
	private final double standardTemperature = 288.15;
	
	/** Earth-surface gravitational acceleration, 9.80665 m/s^2 */
	private final double gravitationalAcceleration = 9.80665;
	
	/** Temperature lapse rate, 0.0065 K/m */
	private final double temperatureLapseRate = 0.0065;
	
	/** Ideal (universal) gas constant, 8.31447 J/(mol·K) */
	private final double gasConstant = 8.31447;
	
	/** Molar mass of dry air, 0.0289644 kg/mol */
	private final double molarMass = 0.0289644;

	/** The length between wind turbine and sea level (in 1 m) */
	private double elevation;
	
	/** Density of air (in 1 skg/m^3) */
	private double airDensity;

	private Random random;

	/**
	 * Build a wind turbine, randomly generate the efficiency and elevation, estimating the air density
	 */
	public WindTurbine() {
		random = new Random();
		// assume the wind turbine is well-designed which has efficiency around 30-35%.
		this.efficiency = 0.3 + (0.35 - 0.3) * random.nextDouble();
		this.elevation = generateElevation();
		this.airDensity = estimateAirDensity();
	}

	/**
	 * Randomly create a elevation of wind turbine in Groningen
	 * @return Elevation in 1 m
	 */
	private double generateElevation() {
		// The min and max elevation of land in Groningen
		double min = -8;
		double max = 16;
		double mean = (min + max) / 2;

		// use min and max wind speed as bound 95% area of normal distribution
		double stdDev = (max - min) / (2 * 1.96);
		return Math.max(random.nextGaussian() * stdDev + mean, 0) + height;
	}

	/**
	 * Estimating the air density where the wind turbine located
	 * @return Air Density in 1 kg/m^3
	 */
	private double estimateAirDensity() {
		double temperature = this.standardTemperature - temperatureLapseRate * elevation;

		double pow = (gravitationalAcceleration * molarMass) / (gasConstant * temperatureLapseRate);
		double pressure = atmosphericPressure
				* Math.pow(1 - (temperatureLapseRate * elevation / this.standardTemperature), pow);

		double airDensity = (pressure * molarMass) / (gasConstant * temperature);

		return airDensity;
	}

	/**
	 * Calculating the energy generated by the wind turbine for one hour
	 * @param windSpeed Wind speed in 1 m/s
	 * @return Energy in 1 kWh
	 */
	public double output(double windSpeed) {

		if (windSpeed < this.cut_in_speed || windSpeed > this.cut_out_speed)
			return 0;

		// power in kW
		double power = 0.5 * this.bladeSweptArea * 1.225 * Math.pow(windSpeed, 3) * this.efficiency / 1000;

		if (Double.isNaN(power)) {
			System.out.println("Error: windSpeed is " + windSpeed);
			System.exit(0);
		}

		// energy in kWh
		return Math.min(power, this.maxPowerOutput) * 1; // * 1 hour
	}

	/**
	 * Estimating the energy generated by the wind turbine for one hour
	 * @param minWindSpeed Minimum wind speed in 1 m/s
	 * @param maxWindSpeed Maximum wind speed in 1 m/s
	 * @return Energy in 1 kWh
	 */
	public double output(double minWindSpeed, double maxWindSpeed) {
		// mean speed in 1m
		double mean = (minWindSpeed + maxWindSpeed) / 2;
		// use min and max wind speed as bound 95% area of normal distribution
		double stdDev = (maxWindSpeed - minWindSpeed) / (2 * 1.96);
		double windSpeed = Math.max(random.nextGaussian() * stdDev + mean, 0);

		return output(windSpeed);
	}

	/** @return The blade length of the wind turbine in 1 m */
	public double getBladeLength() {
		return this.bladeLength;
	}

	/** @return The area swept by blade of the wind turbine in 1 m^2 */
	public double getBladeSweptArea() {
		return this.bladeSweptArea;
	}

	/** @return The air density where the wind turbine locate */
	public double getAirDensity() {
		return this.airDensity;
	}

	/** @return The name of the wind turbine */
	public abstract String info();

}
